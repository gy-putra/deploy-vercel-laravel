<?php

namespace App\Filament\Resources;

use App\Filament\Resources\PilgrimStatusResource\Pages;
use App\Models\Pilgrim;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Actions\BulkAction;
use Illuminate\Database\Eloquent\Collection;
use Filament\Notifications\Notification;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\BadgeColumn;
use Filament\Tables\Actions\Action;
use Filament\Forms\Components\Select;

class PilgrimStatusResource extends Resource
{
    protected static ?string $model = Pilgrim::class;



    protected static ?string $modelLabel = 'Pilgrim Status';

    protected static ?string $pluralModelLabel = 'Pilgrim Status';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('name')
                    ->required()
                    ->disabled(),
                Forms\Components\TextInput::make('nik')
                    ->label('NIK')
                    ->disabled(),
                Forms\Components\TextInput::make('passport_number')
                    ->label('Passport Number')
                    ->disabled(),
                Forms\Components\Select::make('status')
                    ->label('Status')
                    ->options([
                        'pending' => 'Pending',
                        'processing' => 'Processing',
                        'ready_to_depart' => 'Ready to Depart',
                        'completed' => 'Completed',
                    ])
                    ->required()
                    ->native(false),
                Forms\Components\Textarea::make('notes')
                    ->label('Status Notes')
                    ->placeholder('Add notes about status change...')
                    ->rows(3),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('name')
                    ->label('Pilgrim Name')
                    ->searchable()
                    ->sortable(),
                TextColumn::make('nik')
                    ->label('NIK')
                    ->searchable()
                    ->copyable(),
                TextColumn::make('passport_number')
                    ->label('Passport')
                    ->searchable()
                    ->copyable(),
                TextColumn::make('package.name')
                    ->label('Package')
                    ->sortable(),
                BadgeColumn::make('status')
                    ->label('Status')
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'pending' => 'Pending',
                        'processing' => 'Processing',
                        'ready_to_depart' => 'Ready to Depart',
                        'completed' => 'Completed',
                        default => $state,
                    })
                    ->colors([
                        'warning' => 'pending',
                        'primary' => 'processing',
                        'success' => 'ready_to_depart',
                        'gray' => 'completed',
                    ])
                    ->sortable(),
                BadgeColumn::make('payment_status')
                    ->label('Payment')
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'pending' => 'Pending',
                        'partial' => 'Partial',
                        'paid' => 'Paid',
                        'refunded' => 'Refunded',
                        default => $state,
                    })
                    ->colors([
                        'warning' => 'pending',
                        'primary' => 'partial',
                        'success' => 'paid',
                        'danger' => 'refunded',
                    ])
                    ->sortable(),
                TextColumn::make('document_completeness')
                    ->label('Documents')
                    ->badge()
                    ->color(fn (string $state): string => str_contains($state, '100%') ? 'success' : 'warning'),
                TextColumn::make('registration_date')
                    ->label('Registration')
                    ->date()
                    ->sortable(),
            ])
            ->filters([
                SelectFilter::make('status')
                    ->label('Status')
                    ->options([
                        'pending' => 'Pending',
                        'processing' => 'Processing',
                        'ready_to_depart' => 'Ready to Depart',
                        'completed' => 'Completed',
                    ])
                    ->native(false),
                SelectFilter::make('payment_status')
                    ->label('Payment Status')
                    ->options([
                        'pending' => 'Pending',
                        'partial' => 'Partial',
                        'paid' => 'Paid',
                        'refunded' => 'Refunded',
                    ])
                    ->native(false),
                SelectFilter::make('package_id')
                    ->label('Package')
                    ->relationship('package', 'name')
                    ->native(false),
            ])
            ->actions([
                Action::make('quick_status_update')
                    ->label('Update Status')
                    ->icon('heroicon-m-pencil-square')
                    ->color('primary')
                    ->form([
                        Select::make('status')
                            ->label('New Status')
                            ->options([
                                'pending' => 'Pending',
                                'processing' => 'Processing',
                                'ready_to_depart' => 'Ready to Depart',
                                'completed' => 'Completed',
                            ])
                            ->required()
                            ->native(false),
                        Forms\Components\Textarea::make('notes')
                            ->label('Status Notes')
                            ->placeholder('Add notes about status change...')
                            ->rows(3),
                    ])
                    ->action(function (Pilgrim $record, array $data): void {
                        $record->update([
                            'status' => $data['status'],
                        ]);
                        
                        Notification::make()
                            ->success()
                            ->title('Status Updated')
                            ->body("Status updated to {$data['status']} for {$record->name}")
                            ->send();
                    }),
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    BulkAction::make('bulk_status_update')
                        ->label('Update Status')
                        ->icon('heroicon-m-pencil-square')
                        ->color('primary')
                        ->form([
                            Select::make('status')
                                ->label('New Status')
                                ->options([
                                    'pending' => 'Pending',
                                    'processing' => 'Processing',
                                    'ready_to_depart' => 'Ready to Depart',
                                    'completed' => 'Completed',
                                ])
                                ->required()
                                ->native(false),
                            Forms\Components\Textarea::make('notes')
                                ->label('Status Notes')
                                ->placeholder('Add notes about status change...')
                                ->rows(3),
                        ])
                        ->action(function (Collection $records, array $data): void {
                            $records->each(function (Pilgrim $record) use ($data) {
                                $record->update([
                                    'status' => $data['status'],
                                ]);
                            });
                            
                            Notification::make()
                                ->success()
                                ->title('Bulk Status Update')
                                ->body("Status updated to {$data['status']} for {$records->count()} pilgrims")
                                ->send();
                        })
                        ->deselectRecordsAfterCompletion(),
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('registration_date', 'desc')
            ->poll('30s'); // Auto-refresh every 30 seconds
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListPilgrimStatuses::route('/'),
            'view' => Pages\ViewPilgrimStatus::route('/{record}'),
            'edit' => Pages\EditPilgrimStatus::route('/{record}/edit'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->with(['package', 'documents']);
    }
}