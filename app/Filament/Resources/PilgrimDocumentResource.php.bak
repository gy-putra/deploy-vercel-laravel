<?php

namespace App\Filament\Resources;

use App\Filament\Resources\PilgrimDocumentResource\Pages;
use App\Models\PilgrimDocument;
use App\Models\Pilgrim;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\BadgeColumn;
use Filament\Tables\Columns\ImageColumn;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Hidden;
use Filament\Tables\Actions\Action;
use Illuminate\Support\Facades\Storage;
use Filament\Notifications\Notification;

class PilgrimDocumentResource extends Resource
{
    protected static ?string $model = PilgrimDocument::class;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make('Document Information')
                    ->schema([
                        Select::make('pilgrim_id')
                            ->label('Pilgrim')
                            ->relationship('pilgrim', 'name')
                            ->searchable()
                            ->preload()
                            ->required(),
                        
                        Select::make('document_type')
                            ->label('Document Type')
                            ->options([
                                'passport' => 'Passport',
                                'ktp' => 'KTP (ID Card)',
                                'kk' => 'KK (Family Card)',
                                'birth_certificate' => 'Birth Certificate',
                                'marriage_certificate' => 'Marriage Certificate',
                                'health_certificate' => 'Health Certificate',
                                'vaccination_certificate' => 'Vaccination Certificate',
                                'photo' => 'Photo',
                                'other' => 'Other'
                            ])
                            ->required(),
                        
                        FileUpload::make('file_path')
                            ->label('Document File')
                            ->directory('pilgrim-documents')
                            ->acceptedFileTypes(['image/*', 'application/pdf'])
                            ->maxSize(5120) // 5MB
                            ->required()
                            ->afterStateUpdated(function ($state, callable $set) {
                                if ($state) {
                                    $file = $state;
                                    $set('file_name', $file->getClientOriginalName());
                                    $set('file_type', $file->getClientMimeType());
                                    $set('file_size', $file->getSize());
                                }
                            }),
                        
                        Select::make('status')
                            ->label('Status')
                            ->options([
                                'pending' => 'Pending Review',
                                'approved' => 'Approved',
                                'rejected' => 'Rejected'
                            ])
                            ->default('pending')
                            ->required(),
                        
                        Textarea::make('notes')
                            ->label('Notes')
                            ->rows(3)
                            ->columnSpanFull(),
                        
                        Hidden::make('uploaded_at')
                            ->default(now()),
                    ])
                    ->columns(2)
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('pilgrim.name')
                    ->label('Pilgrim Name')
                    ->searchable()
                    ->sortable(),
                
                TextColumn::make('pilgrim.nik')
                    ->label('NIK')
                    ->searchable(),
                
                TextColumn::make('document_type')
                    ->label('Document Type')
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        'passport' => 'success',
                        'ktp' => 'info',
                        'kk' => 'warning',
                        'health_certificate' => 'danger',
                        'vaccination_certificate' => 'primary',
                        default => 'gray',
                    }),
                
                TextColumn::make('file_name')
                    ->label('File Name')
                    ->limit(30)
                    ->tooltip(function (TextColumn $column): ?string {
                        $state = $column->getState();
                        if (strlen($state) <= 30) {
                            return null;
                        }
                        return $state;
                    }),
                
                TextColumn::make('file_size')
                    ->label('File Size')
                    ->formatStateUsing(fn ($state) => number_format($state / 1024, 2) . ' KB'),
                
                BadgeColumn::make('status')
                    ->label('Status')
                    ->colors([
                        'warning' => 'pending',
                        'success' => 'approved',
                        'danger' => 'rejected',
                    ]),
                
                TextColumn::make('uploaded_at')
                    ->label('Uploaded')
                    ->dateTime()
                    ->sortable(),
                
                TextColumn::make('verified_at')
                    ->label('Verified')
                    ->dateTime()
                    ->sortable(),
                
                TextColumn::make('verifiedBy.name')
                    ->label('Verified By')
                    ->default('N/A'),
            ])
            ->filters([
                SelectFilter::make('document_type')
                    ->label('Document Type')
                    ->options([
                        'passport' => 'Passport',
                        'ktp' => 'KTP (ID Card)',
                        'kk' => 'KK (Family Card)',
                        'birth_certificate' => 'Birth Certificate',
                        'marriage_certificate' => 'Marriage Certificate',
                        'health_certificate' => 'Health Certificate',
                        'vaccination_certificate' => 'Vaccination Certificate',
                        'photo' => 'Photo',
                        'other' => 'Other'
                    ]),
                
                SelectFilter::make('status')
                    ->label('Status')
                    ->options([
                        'pending' => 'Pending Review',
                        'approved' => 'Approved',
                        'rejected' => 'Rejected'
                    ]),
                
                SelectFilter::make('pilgrim_id')
                    ->label('Pilgrim')
                    ->relationship('pilgrim', 'name')
                    ->searchable()
                    ->preload(),
            ])
            ->actions([
                Action::make('download')
                    ->label('Download')
                    ->icon('heroicon-o-arrow-down-tray')
                    ->action(function (PilgrimDocument $record) {
                        return Storage::download($record->file_path, $record->file_name);
                    })
                    ->visible(fn (PilgrimDocument $record) => Storage::exists($record->file_path)),
                
                Action::make('approve')
                    ->label('Approve')
                    ->icon('heroicon-o-check-circle')
                    ->color('success')
                    ->action(function (PilgrimDocument $record) {
                        $record->update([
                            'status' => 'approved',
                            'verified_at' => now(),
                            'verified_by' => auth()->id(),
                        ]);
                        
                        Notification::make()
                            ->title('Document Approved')
                            ->success()
                            ->send();
                    })
                    ->visible(fn (PilgrimDocument $record) => $record->status === 'pending'),
                
                Action::make('reject')
                    ->label('Reject')
                    ->icon('heroicon-o-x-circle')
                    ->color('danger')
                    ->form([
                        Textarea::make('notes')
                            ->label('Rejection Reason')
                            ->required()
                    ])
                    ->action(function (PilgrimDocument $record, array $data) {
                        $record->update([
                            'status' => 'rejected',
                            'verified_at' => now(),
                            'verified_by' => auth()->id(),
                            'notes' => $data['notes'],
                        ]);
                        
                        Notification::make()
                            ->title('Document Rejected')
                            ->danger()
                            ->send();
                    })
                    ->visible(fn (PilgrimDocument $record) => $record->status === 'pending'),
                
                ViewAction::make(),
                EditAction::make(),
            ])
            ->bulkActions([
                BulkActionGroup::make([
                    DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListPilgrimDocuments::route('/'),
            'create' => Pages\CreatePilgrimDocument::route('/create'),
            'view' => Pages\ViewPilgrimDocument::route('/{record}'),
            'edit' => Pages\EditPilgrimDocument::route('/{record}/edit'),
        ];
    }
}